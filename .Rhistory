# Now creating separate folders with Texavier files...
Texevier::create_template(directory = "C:/Studies/Masters/2nd_Semester/Data_Science/22610987", template_name = "Question1")
Texevier::create_template(directory = "C:/Studies/Masters/2nd_Semester/Data_Science/22610987", template_name = "Question2")
Texevier::create_template(directory = "C:/Studies/Masters/2nd_Semester/Data_Science/22610987", template_name = "Question3")
Texevier::create_template(directory = "C:/Studies/Masters/2nd_Semester/Data_Science/22610987", template_name = "Question4")
Texevier::create_template(directory = "C:/Studies/Masters/2nd_Semester/Data_Science/22610987", template_name = "Question5")
# I've set this to not run again as the folders are already created. Dont need to include this in the prac.
rm(list = ls())
gc()
list.files('Question2/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
rm(list = ls())
gc()
library(readr)
library(tidyverse)
list.files('Question2/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
coldplay <- read_csv("Question2/data/Coldplay.csv")
metallica <- read_csv("Question2/data/metallica.csv")
spotify <- read_rds("Question2/data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("Question2/data/charts.rds")
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
c_plot
m_plot
# First wrangling the Spotify and billboard data a little bit and joining them...
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
# .. then feeding it to my attributes plotting function
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
c_heatmap <- heat_mapper(coldplay_studio, title = "Heatmap for Coldplay Songs")
c_heatmap
rm(list = ls())
gc()
list.files('Question1/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
rm(list = ls())
gc()
library(tidyverse)
library(readr)
list.files('Question1/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("Question1/data/Baby_Names_By_US_State.rds")
charts <- read_rds("Question1/data/charts.rds")
hbo_titles <- read_rds("Question1/data/HBO_titles.rds")
hbo_credits <- read_rds("Question1/data/HBO_credits.rds")
# Getting the Spearman correlations in the form of plot data using my spearman_plot function...
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# ... and plotting said data using my time series correlation plotter function.
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
# Using the 'plm' package to run regressions on the panel data, whaich I employ using my names_reg function
actor_names_M <- names_reg_test(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg_test(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
View(names_reg_test)
# Using the 'plm' package to run regressions on the panel data, which I employ using my names_reg function
actor_names_M <- names_reg_test(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg_test(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls())
gc()
library(readr)
library(tidyverse)
list.files('Question2/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
coldplay <- read_csv("Question2/data/Coldplay.csv")
metallica <- read_csv("Question2/data/metallica.csv")
spotify <- read_rds("Question2/data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("Question2/data/charts.rds")
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
c_plot
m_plot
rm(list = ls())
gc()
library(tidyverse)
library(readr)
list.files('Question3/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
alloc <- read_csv("Question3/data/Financial Allocations.csv")
commit <- read_csv("Question3/data/Financial Commitments.csv")
# Just a small bit of wrangling...
# ... by joining the data sets by "country" and "EU member" columns so that I only have to work with one data set...
data <- inner_join(alloc, commit, by = c("Country", "EU member"))
# ... and then filtering out countries who are not EU Members
data <- data %>%
filter(`EU member` == 1) %>%
mutate(Allocations_GDP_Percent = (`Total bilateral allocations($ billion)` / `GDP in 2021($ billion)`) * 100) %>%
mutate(Commitments_GDP_Percent = (`Total bilateral commitments($ billion)` / `GDP in 2021($ billion)`) * 100)
plot <- ggplot(data, aes(x = Country,
y = Allocations_GDP_Percent)) +
geom_bar(stat = "identity",
fill = "navy") +
labs(title = "Total Allocations as a Proportion of GDP",
x = "Country",
y = "Percentage of GDP") +
theme_minimal() +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
plot
# Filtering out Estonia and Malta...
data <- data %>%
filter(!Country %in% c("Estonia", "Malta"))
# Now plotting it using my double_bar_plotter function...
compare_plot <- double_bar_plotter(data)
compare_plot
# Plot this using my "allocation_proportions" function
proportions <- allocation_proportions(data)
proportions
# Plot this using my "allocation_head" function...
allocation_head <- allocation_head(data)
allocation_head
