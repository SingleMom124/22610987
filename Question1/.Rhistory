media$CharacterName <- sapply(strsplit(media$character, " "), `[`, 1)
media <- media %>%
mutate(Top_5_character = ifelse(CharacterName %in% top_names$Name, 1, 0),
Top_5_actor = ifelse(ActorName %in% top_names$Name, 1, 0))
colnames(media)[9] <- "Year"
colnames(media)[20] <- "Name"
reg_data <- inner_join(media, national, by = c("Year", "Name")) %>%
filter(Gender == gender)
model1 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "pooling")
model2 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "random")
model3 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "within")
regs <- huxreg(model1, model2, model3)
return(regs)
}
male_reg <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
library(dplyr)
library(plm)
library(huxtable)
# Summarize national data
national <- baby_names %>%
group_by(Year, Gender, Name) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Calculate total count by name
total_count <- national %>%
filter(Gender == "M") %>%
group_by(Name) %>%
summarise(TotalCount = sum(Count))
# Identify top names
top_names <- total_count %>%
arrange(desc(TotalCount)) %>%
head(5)
media <- inner_join(credits, movies, by = "id")
library(dplyr)
library(plm)
library(huxtable)
# Summarize national data
national <- baby_names %>%
group_by(Year, Gender, Name) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Calculate total count by name
total_count <- national %>%
filter(Gender == "M") %>%
group_by(Name) %>%
summarise(TotalCount = sum(Count))
# Identify top names
top_names <- total_count %>%
arrange(desc(TotalCount)) %>%
head(5)
media <- inner_join(hbo_credits, hbo_titles, by = "id")
media$ActorName <- sapply(strsplit(media$name, " "), `[`, 1)
media$CharacterName <- sapply(strsplit(media$character, " "), `[`, 1)
media <- media %>%
mutate(Top_5_character = ifelse(CharacterName %in% top_names$Name, 1, 0),
Top_5_actor = ifelse(ActorName %in% top_names$Name, 1, 0))
colnames(media)[9] <- "Year"
colnames(media)[20] <- "Name"
reg_data <- inner_join(media, national, by = c("Year", "Name")) %>%
filter(Gender == "M")
model1 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "pooling")
model2 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "random")
model3 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "within")
regs <- huxreg(model1, model2, model3)
View(regs)
print(reg)
print(regs)
library(dplyr)
library(plm)
library(huxtable)
# Summarize national data
national <- baby_names %>%
group_by(Year, Gender, Name) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Calculate total count by name
total_count <- national %>%
filter(Gender == "M") %>%
group_by(Name) %>%
summarise(TotalCount = sum(Count))
# Identify top names
top_names <- total_count %>%
arrange(desc(TotalCount)) %>%
head(5)
media <- inner_join(hbo_credits, hbo_titles, by = "id")
media$ActorName <- sapply(strsplit(media$name, " "), `[`, 1)
media$CharacterName <- sapply(strsplit(media$character, " "), `[`, 1)
media <- media %>%
mutate(Top_5_actor = ifelse(ActorName %in% top_names$Name, 1, 0))
colnames(media)[9] <- "Year"
colnames(media)[20] <- "Name"
reg_data <- inner_join(media, national, by = c("Year", "Name")) %>%
filter(Gender == "M")
model1 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "pooling")
model2 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "random")
model3 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "within")
regs <- huxreg(model1, model2, model3)
print(regs)
library(dplyr)
library(plm)
library(huxtable)
# Summarize national data
national <- baby_names %>%
group_by(Year, Gender, Name) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Calculate total count by name
total_count <- national %>%
filter(Gender == "M") %>%
group_by(Name) %>%
summarise(TotalCount = sum(Count))
# Identify top names
top_names <- total_count %>%
arrange(desc(TotalCount)) %>%
head(5)
media <- inner_join(hbo_credits, hbo_titles, by = "id")
suppressWarnings({
media$ActorName <- sapply(strsplit(media$name, " "), `[`, 1)
media$CharacterName <- sapply(strsplit(media$character, " "), `[`, 1)
})
media <- media %>%
mutate(Top_5_actor = ifelse(ActorName %in% top_names$Name, 1, 0))
colnames(media)[9] <- "Year"
colnames(media)[20] <- "Name"
reg_data <- inner_join(media, national, by = c("Year", "Name")) %>%
filter(Gender == "M")
model1 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "pooling")
model2 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "random")
model3 <- plm(Count ~ tmdb_popularity + imdb_score + Top_5_actor,
data = reg_data,
index = c("id"),
model = "within")
regs <- huxreg(model1, model2, model3)
print(regs)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# What I am doing now is calculating how many time a name has been used throughout the entire data set...
library(ggplot2)
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
male_reg <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
male_reg
# What I am doing now is calculating how many time a name has been used throughout the entire data set...
library(ggplot2)
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
male_reg <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
male_reg
female_reg <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
female_reg
View(baby_names)
View(baby_names)
View(baby_names)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
View(names_reg)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
