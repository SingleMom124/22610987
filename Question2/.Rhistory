m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
attributes
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spoitfy <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
attributes
library(dplyr)
library(ggplot2)
# Subset data for each band
band1_subset <- metallica_studio %>%
select(album, release_date, tempo, energy, valence, danceability, duration_ms) %>%
mutate(band = "Metallica")  # Add band name
band2_subset <- coldplay_studio %>%
select(album, release_date, tempo, energy, valence, danceability, duration_ms) %>%
mutate(band = "coldplay")  # Add band name
# Combine data
combined_data <- bind_rows(band1_subset, band2_subset)
View(combined_data)
combined_data$release_date <- as.Date(combined_data$release_date)
attributes <- combined_data %>%
group_by(band, album) %>%
summarise(avg_tempo = mean(tempo, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_valence = mean(valence, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_duration_ms = mean(duration_ms, na.rm = TRUE)) %>%
ungroup()
View(attributes)
plot <- ggplot(attributes, aes(x = album, y = avg_tempo, color = band)) +
geom_line() +
labs(title = "Musical Progression: Average Tempo Over Time",
x = "Album", y = "Average Tempo",
color = "Band") +
theme_minimal()
plot
attributes <- combined_data %>%
group_by(band, album) %>%
summarise(avg_tempo = mean(tempo, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_valence = mean(valence, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_duration_ms = mean(duration_ms, na.rm = TRUE))
View(attributes)
combined_data$release_date <- as.Date(combined_data$release_date)
combined_data$release_year <- year(combined_data$release_date)
View(combined_data)
attributes <- combined_data %>%
group_by(band, release_year) %>%
summarise(avg_tempo = mean(tempo, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_valence = mean(valence, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_duration_ms = mean(duration_ms, na.rm = TRUE),
.groups = 'drop') %>%
ungroup()
View(attributes)
plot <- ggplot(attributes, aes(x = release_year, y = avg_tempo, color = band)) +
geom_line() +
labs(title = "Musical Progression: Average Tempo Over Time",
x = "Release Year", y = "Average Tempo",
color = "Band") +
theme_minimal()
plot
attributes <- combined_data %>%
group_by(band, release_year) %>%
summarise(avg_tempo = mean(tempo, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_valence = mean(valence, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_duration_ms = mean(duration_ms, na.rm = TRUE)) %>%
ungroup()
# Plot average tempo over time for both bands
plot <- ggplot(attributes, aes(x = release_year, y = avg_tempo, color = band)) +
geom_line() +
labs(title = "Musical Progression: Average Tempo Over Time",
x = "Release Year", y = "Average Tempo",
color = "Band") +
theme_minimal()
plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
attributes
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spoitfy <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spoitfy <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spoitfy <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spoitfy <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
View(billboard_100)
View(spoitfy)
View(billboard_100)
View(billboard_100)
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = "name")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = "name")
View(mainstream_music)
attributes <- band_attributes(metallica_studio, coldplay_studio, band_name1 = "Metallica", band_name2 = "Coldplay")
print(attributes)
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
View(mainstream_music)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
View(band_attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("data/Coldplay.csv")
metallica <- read_csv("data/metallica.csv")
spotify <- read_rds("data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("data/charts.rds")
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
# ... and plotting as box and whiskers
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
# Using functions to filter out all non-studio songs...
metallica_studio <- studio_filter(metallica)
# ... and plotting as box and whiskers
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
# ... and plotting as box and whiskers
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
# Using functions to filter out all non-studio songs...
metallica_studio <- studio_filter(metallica)
# ... and plotting as box and whiskers
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
# First wrangling the Spotify and billboard data a little bit and joining them...
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
# .. then feeding it to my attributes plotting function
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
# First wrangling the Spotify and billboard data a little bit and joining them...
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
# .. then feeding it to my attributes plotting function
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
c_heatmap <- heat_mapper(coldplay_studio, title = "Heatmap for Coldplay Songs")
c_heatmap
# First wrangling the Spotify and billboard data a little bit and joining them...
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
# .. then feeding it to my attributes plotting function
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
c_heatmap <- heat_mapper(coldplay_studio, title = "Heatmap for Coldplay Songs")
c_heatmap
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
# ... and plotting as box and whiskers
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
# Using functions to filter out all non-studio songs...
metallica_studio <- studio_filter(metallica)
# ... and plotting as box and whiskers
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
# Using functions to filter out all non-studio songs...
metallica_studio <- studio_filter(metallica)
# ... and plotting as box and whiskers
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
# ... and plotting as box and whiskers
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
# ... and plotting as box and whiskers
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('Question1/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('Question1/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("Question1/data/Baby_Names_By_US_State.rds")
charts <- read_rds("Question1/data/charts.rds")
hbo_titles <- read_rds("Question1/data/HBO_titles.rds")
hbo_credits <- read_rds("Question1/data/HBO_credits.rds")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
library(tidyverse)
library(readr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("data/Baby_Names_By_US_State.rds")
charts <- read_rds("data/charts.rds")
hbo_titles <- read_rds("data/HBO_titles.rds")
hbo_credits <- read_rds("data/HBO_credits.rds")
# Getting the plot data
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# Plotting the data
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
# Plotting the top 5 persistently popular names per gender throughout the years
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
list.files('Question1/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
baby_names <- read_rds("Question1/data/Baby_Names_By_US_State.rds")
charts <- read_rds("Question1/data/charts.rds")
hbo_titles <- read_rds("Question1/data/HBO_titles.rds")
hbo_credits <- read_rds("Question1/data/HBO_credits.rds")
# Getting the Spearman correlations in the form of plot data using my spearman_plot function...
plot_data_M <- spearman_corr(baby_names, gender = "M")
plot_data_F <- spearman_corr(baby_names, gender = "F")
# ... and plotting said data using my time series correlation plotter function.
plots <- ts_corr_plotter(plot_data_M, plot_data_F)
plots
# Plotting the top 5 persistently popular names per gender throughout the years
top_male_names <- name_plotter(baby_names, gender = "M")
top_male_names
top_female_names <- name_plotter(baby_names, gender = "F")
top_female_names
# Using the 'plm' package to run regressions on the panel data, whaich I employ using my names_reg function
actor_names_M <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "M")
actor_names_M
actor_names_F <- names_reg(baby_names, hbo_credits, hbo_titles, gender = "F")
actor_names_F
rm(list = ls())
gc()
list.files('Question2/code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
library(readr)
library(tidyverse)
coldplay <- read_csv("Question2/data/Coldplay.csv")
metallica <- read_csv("Question2/data/metallica.csv")
spotify <- read_rds("Question2/data/Broader_Spotify_Info.rds")
billboard_100 <- read_rds("Question2/data/charts.rds")
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
c_plot
metallica_studio <- studio_filter(metallica)
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
m_plot
# Using functions to filter out all non-studio songs...
coldplay_studio <- studio_filter(coldplay)
metallica_studio <- studio_filter(metallica)
c_plot <- box_plotter(coldplay_studio, "popularity", title = "Popularity by album (Coldplay)")
m_plot <- box_plotter(metallica_studio, "popularity", title = "Popularity by album (Metallica)")
c_plot
m_plot
# First wrangling the Spotify and billboard data a little bit and joining them...
billboard_100 <- billboard_100 %>%
rename(name = song)
mainstream_music <- inner_join(spotify, billboard_100, by = c("name", "artist"))
mainstream_music <- mainstream_music %>%
rename(release_date = date)
# .. then feeding it to my attributes plotting function
attributes <- band_attributes(metallica_studio, coldplay_studio, mainstream_music, band_name1 = "Metallica", band_name2 = "Coldplay", band_name3 = "Billboard100")
print(attributes)
m_heatmap <- heat_mapper(metallica_studio, title = "Heatmap for Metallica Songs")
m_heatmap
c_heatmap <- heat_mapper(coldplay_studio, title = "Heatmap for Coldplay Songs")
c_heatmap
